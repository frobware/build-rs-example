name: CI

on:
  push:
    branches: [main]
    tags:
      - "*"  # Runs on all tag pushes
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allows manual execution

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # https://github.com/actions/checkout/issues/1467
          fetch-depth: 0
          fetch-tags: true

      - name: Git Describe
        run: git describe --tags --always --dirty

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Ensure Cargo.toml version matches Git describe
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          GIT_VERSION=$(git describe --tags --always --dirty)
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Git describe version: $GIT_VERSION"
          if ! echo "$GIT_VERSION" | grep -q "^$CARGO_VERSION"; then
            echo "::warning file=Cargo.toml,line=1,col=1::Version mismatch! Cargo.toml ($CARGO_VERSION) does not match Git describe ($GIT_VERSION)"
          fi
      - name: Format check
        run: make fmt

      - name: Run Clippy
        run: make clippy

      - name: Build project
        run: make build

      - name: Run Binary
        run: |
          output=$(make run)
          echo "Cargo output: $output"
          if echo "$output" | grep -q -- '-dirty'; then
            echo "CI build should not be dirty!"
            exit 1
          fi

      - name: Run Self-Tests
        run: make test

      - name: Ensure working tree is clean after build
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "The build modified files!"
            git status
            exit 1
          fi

      - name: Enforce Cargo Version Matches Git Tag
        if: startsWith(github.ref, 'refs/tags/')  # Only run this step on tag pushes
        run: |
          CARGO_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
          GIT_VERSION=$(git describe --tags --exact-match || echo "untagged")
          echo "Cargo.toml version: $CARGO_VERSION"
          echo "Git tag: $GIT_VERSION"
          if [[ "$GIT_VERSION" != "$CARGO_VERSION" ]]; then
            echo "Error: Tag ($GIT_VERSION) does not match Cargo.toml version ($CARGO_VERSION)!"
            exit 1
          fi
