#!/usr/bin/env bash

set -euo pipefail

if [[ ! -f "Cargo.toml" ]]; then
    echo "Error: Cargo.toml not found. Run this script from the project root." >&2
    exit 1
fi

current_version=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')

if [[ "$current_version" =~ -pre$ ]]; then
    echo "Version is already in development mode ($current_version). No changes needed." >&2
    exit 1
fi

if [[ "$current_version" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
    major=${BASH_REMATCH[1]}
    minor=${BASH_REMATCH[2]}
    patch=${BASH_REMATCH[3]}
    # Default bump type is **patch** unless specified.
    bump_type=${1:-patch}
else
    echo "Error: Unexpected version format: $current_version (expected X.Y.Z)" >&2
    exit 1
fi

case "$bump_type" in
    major)
        ((major++))
        minor=0
        patch=0
        ;;
    minor)
        ((minor++))
        patch=0
        ;;
    patch)
        ((patch++))
        ;;
    *)
        echo "Error: Invalid argument '$bump_type'. Expected 'major', 'minor', or 'patch'." >&2
        exit 1
        ;;
esac

new_version="$major.$minor.$patch-pre"

echo "Bumping version: $current_version -> $new_version"
sed -i.bak "s/^version = \"$current_version\"/version = \"$new_version\"/" Cargo.toml
rm -f Cargo.toml.bak

# Update Cargo.lock.
cargo check >/dev/null 2>&1

git add Cargo.toml Cargo.lock
git commit -m "Start development on $new_version"

echo "Version updated to $new_version."
